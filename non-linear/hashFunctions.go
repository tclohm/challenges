package main

import (
	"bytes"
	"crypto/sha256"
	"encoding"
	"fmt"
	"log"
	"hash"
)

// binary marshaled hash
// the hashes of the two strings are printed
// sums are compared with the second hash using equal method on bytes
func main() {
	const (
		ex1 = "One simple doesn't walk into Mordor"
		ex2 = "Only siths speaks in absolutes"
	)

	var firstHash hash.Hash
	
	firstHash = sha256.New()
	firstHash.Write([]byte(ex1))
	
	var marshaler encoding.BinaryMarshaler
	var ok bool

	marshaler, ok = firstHash.(encoding.BinaryMarshaler)
	if !ok {
		log.Fatal("first Hash is not generated by encoding.BinaryMarshaler")
	}

	var data []byte
	var err error

	data, err = marshaler.MarshalBinary()

	if err != nil {
		log.Fatal("failure to create first Hash:", err)
	}

	var secondHash hash.Hash

	secondHash = sha256.New()

	var unmarshaler encoding.BinaryUnmarshaler

	unmarshaler, ok = secondHash.(encoding.BinaryUnmarshaler)

	if !ok {
		log.Fatal("second hash is not generated by encoding.BinaryUnmarshaler")
	}

	if err := unmarshaler.UnmarshalBinary(data); err != nil {
		log.Fatal("failure to create hash:", err)
	}

	firstHash.Write([]byte(ex1))
	secondHash.Write([]byte(ex2))
	fmt.Printf("%x\n", firstHash.Sum(nil))
	fmt.Println(bytes.Equal(firstHash.Sum(nil), secondHash.Sum(nil)))

}